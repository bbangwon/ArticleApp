@page "/Notices/Manage"
@using NoticeApp.Pages.Notices.Components

@inject INoticeRepository Repository
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-12">
        <a href="/Notices/Create" class="btn btn-primary">Create</a>
        <AuthorizeView>
            <Authorized>
            </Authorized>
            <NotAuthorized>
                <a href="/Notices" class="btn btn-primary">List</a>
                <input type="button" name="btnCreate" value="Create with Modal" 
                    class="btn btn-primary" 
                    @onclick="ShowEditorForm" />                
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Administrators, Managers">
            <a href="/Notices" class="btn btn-primary">List</a>
        </AuthorizeView>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (models == null)
        {
            <div>
                <p>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                </p>
            </div>
        }
        else
        {
            <table class="table table-bordered table-hover">
                <thead class="thread-light">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Created</th>
                        <th>Action</th>
                        <th>Admin</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var m in models)
                    {
                        <tr>
                            <td>@m.Id</td>
                            <td @onclick="@(() => NameClick(m.Id))">
                                <a href="/Notices/Details/@m.Id">
                                    @m.Name
                                </a>
                            </td>
                            <td>@m.Created.ToShortTimeString()</td>
                            <td>
                                <a href="/Notices/Details/@m.Id" class="btn btn-light">Details</a>
                                <a href="/Notices/Edit/@m.Id" class="btn btn-light">Edit</a>
                                <a href="/Notices/Delete/@m.Id" class="btn btn-light">Delete</a>
                            </td>
                            <td>
                                <input type="button" name="btnEdit" value="Edit with Modal"
                                   class="btn btn-primary"
                                   @onclick="(() => EditBy(m))" />
                                <input type="button" name="btnDelete" value="Delete with Modal"
                                   class="btn btn-danger"
                                   @onclick="(() => DeleteBy(m))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-12">
        <BWPager PagerModel="pagerModel" PageIndexChanged="OnPageIndexChanged"></BWPager>
    </div>
</div>

<EditorForm 
    Model="model" 
    @ref="EditorFormReference"
    CreateCallback="CreateOrEdit"
    EditCallback="CreateOrEdit">
    <EditorFormTitle>@EditorFormTitle</EditorFormTitle>
</EditorForm>

<DeleteDialog @ref="DeleteDialogReference" OnClick="DeleteClick"></DeleteDialog>

@code {
    public string EditorFormTitle { get; set; } = "CREATE";

    private List<Notice> models;

    private BWPagerModel pagerModel = new BWPagerModel()
    {
        Size = 2,
        ButtonCount = 5
    };

    protected Notice model = new Notice();

    public EditorForm? EditorFormReference { get; set; }
    public DeleteDialog? DeleteDialogReference { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LoadPages();
    }

    async void LoadPages()
    {
        if (Repository != null)
        {
            pagerModel.RecordCount = await Repository.GetTotalRecordsCountAsync();
            models = await Repository.GetPageAsync(pagerModel.Index, pagerModel.Size);
        }
        StateHasChanged();
    }

    void OnPageIndexChanged(int pageNumber)
    {
        LoadPages();
    }

    protected void NameClick(int id)
    {
        NavigationManager.NavigateTo($"/Notices/Details/{id}");
    }

    protected void ShowEditorForm()
    {
        EditorFormTitle = "CREATE";
        model = new Notice();
        EditorFormReference?.Show();
    }

    protected void EditBy(Notice model)
    {
        EditorFormTitle = "EDIT";
        this.model = model;
        EditorFormReference?.Show();
    }

    protected async void DeleteClick()
    {
        await Repository.RemoveAsync(this.model.Id);
        DeleteDialogReference?.Hide();
        this.model = new Notice();
        LoadPages();
    }

    protected void DeleteBy(Notice model)
    {
        this.model = model;
        DeleteDialogReference?.Show();
    }

    protected void CreateOrEdit()
    {
        EditorFormReference?.Hide();
        LoadPages();
    }
}

