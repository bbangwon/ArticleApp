@page "/Notices/Manage"
@using NoticeApp.Pages.Notices.Components

@inject INoticeRepository Repository
@inject NavigationManager NavigationManager

@inject IFileStorageManager FileStorageManager
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-md-12">
        <a href="/Notices/Create" class="btn btn-primary">Create</a>
        <AuthorizeView>
            <Authorized>
            </Authorized>
            <NotAuthorized>
                <a href="/Notices" class="btn btn-primary">List</a>
                <input type="button" name="btnCreate" value="Create with Modal"
                       class="btn btn-primary"
                       @onclick="ShowEditorForm" />
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Administrators, Managers">
            <a href="/Notices" class="btn btn-primary">List</a>
        </AuthorizeView>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (models == null)
        {
            <div>
                <p>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                </p>
            </div>
        }
        else
        {
            <table class="table table-bordered table-hover">
                <thead class="thread-light">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Created</th>
                        <th>IsPinned</th>
                        <th>Action</th>
                        <th>Admin</th>
                    </tr>
                </thead>
                @if (models.Count == 0)
                {
                    <tbody>
                        <tr>
                            <td colspan="4" class="text-center">
                                <p>데이터가 없습니다.</p>
                            </td>
                        </tr>
                    </tbody>
                }
                <tbody>
                    @foreach (var m in models)
                    {
                        <tr>
                            <td>@m.Id</td>
                            <td @onclick="@(() => NameClick(m.Id))">
                                <a href="/Notices/Details/@m.Id">
                                    @m.Name
                                </a>
                            </td>
                            <td>@m.Created.ToShortTimeString()</td>
                            <td>@(m.IsPinned == true ? "공지" : "")</td>
                            <td>
                                <a href="/Notices/Details/@m.Id" class="btn btn-light">Details</a>
                                <a href="/Notices/Edit/@m.Id" class="btn btn-light">Edit</a>
                                <a href="/Notices/Delete/@m.Id" class="btn btn-light">Delete</a>
                            </td>
                            <td>
                                <input type="button" name="btnEdit" value="Edit with Modal"
                               class="btn btn-primary"
                               @onclick="(() => EditBy(m))" />
                                <input type="button" name="btnDelete" value="Delete with Modal"
                               class="btn btn-danger"
                               @onclick="(() => DeleteBy(m))" />
                                <input type="button" name="btnToggle" value="Pinned with Modal"
                               class="btn btn-primary"
                               @onclick="(() => ToggleBy(m))" />
                               <input type="button" name="btnDownload" value="Download"
                                   class="btn btn-primary" @onclick="(() => DownloadBy(m))"/>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-12">
        <BWPager PagerModel="pagerModel" PageIndexChanged="OnPageIndexChanged"></BWPager>
    </div>

    <div class="col-md-12">
        <SearchBox SearchQueryChanged="Search" placeholder="Search Notices..."></SearchBox>
    </div>
</div>

<EditorForm Model="model"
            @ref="EditorFormReference"
            CreateCallback="CreateOrEdit"
            EditCallback="CreateOrEdit">
    <EditorFormTitle>@EditorFormTitle</EditorFormTitle>
</EditorForm>

<DeleteDialog @ref="DeleteDialogReference" OnClick="DeleteClick"></DeleteDialog>

@if (IsInlineDialogShow)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">공지글로 올리기</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close" @onclick="ToggleClose">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@(model.Id)번 글을 공지글로 설정 @(model.IsPinned == true ? "해제" : "")할까요?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" type="button" @onclick="ToggleClick">Yes</button>
                    <button class="btn btn-secondary" type="button" data-dismiss="modal" @onclick="ToggleClose">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ParentId { get; set; }

    public string EditorFormTitle { get; set; } = "CREATE";

    private List<Notice> models;

    private BWPagerModel pagerModel = new BWPagerModel()
        {
            Size = 2,
            ButtonCount = 5
        };

    protected Notice model = new Notice();

    public EditorForm? EditorFormReference { get; set; }
    public DeleteDialog? DeleteDialogReference { get; set; }

    public bool IsInlineDialogShow { get; set; } = false;

    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPages();
    }

    async Task LoadPages()
    {
        if (Repository != null)
        {
            if (!string.IsNullOrEmpty(this.searchQuery))
            {
                if(ParentId == 0)
                {
                    pagerModel.RecordCount = await Repository.GetTotalRecordsCountWithSearchQueryAsync(this.searchQuery);
                    models = await Repository.GetPageWithSearchQueryAsync(pagerModel.Index, pagerModel.Size, this.searchQuery);                    
                }
                else
                {
                    pagerModel.RecordCount = await Repository.GetTotalRecordsCountByParentIdWithSearchQueryAsync(ParentId, this.searchQuery);
                    models = await Repository.GetPageByParentIdWithSearchQueryAsync(pagerModel.Index, pagerModel.Size, ParentId, this.searchQuery);
                }
            }
            else
            {
                if (ParentId == 0)
                {
                    pagerModel.RecordCount = await Repository.GetTotalRecordsCountAsync();
                    models = await Repository.GetPageAsync(pagerModel.Index, pagerModel.Size);
                }
                else
                {
                    pagerModel.RecordCount = await Repository.GetTotalRecordsCountByParentIdAsync(ParentId);
                    models = await Repository.GetPageByParentIdAsync(pagerModel.Index, pagerModel.Size, ParentId);
                }
            }
        }
        StateHasChanged();
    }

    async void OnPageIndexChanged(int pageNumber)
    {
        await LoadPages();
    }

    protected void NameClick(int id)
    {
        NavigationManager.NavigateTo($"/Notices/Details/{id}");
    }

    protected void ShowEditorForm()
    {
        EditorFormTitle = "CREATE";
        model = new Notice();
        EditorFormReference?.Show();
    }

    protected void EditBy(Notice model)
    {
        EditorFormTitle = "EDIT";
        this.model = model;
        EditorFormReference?.Show();
    }

    protected async void DeleteClick()
    {
        string folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "files");
        if (!string.IsNullOrEmpty(this.model.FileName))
            await FileStorageManager.DeleteAsync(this.model.FileName, folderPath);            

        await Repository.RemoveAsync(this.model.Id);
        DeleteDialogReference?.Hide();
        this.model = new Notice();
        await LoadPages();
    }

    protected void DeleteBy(Notice model)
    {
        this.model = model;
        DeleteDialogReference?.Show();
    }

    protected void ToggleBy(Notice model)
    {
        this.model = model;
        this.IsInlineDialogShow = true;
    }

    protected async void DownloadBy(Notice model)
    {
        if (!string.IsNullOrEmpty(model.FileName))
        {
            var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "files");
            byte[]? fileBytes = await FileStorageManager.DownloadAsync(model.FileName, folderPath);

            if(fileBytes != null)
            {
                await JSRuntime.SaveAs(model.FileName, fileBytes);
            }
        }
    }

    protected async void CreateOrEdit()
    {
        EditorFormReference?.Hide();
        await LoadPages();
    }

    protected void ToggleClose()
    {
        this.IsInlineDialogShow = false;
        this.model = new Notice();
    }

    protected async void ToggleClick()
    {
        this.model.IsPinned = !this.model.IsPinned;

        await Repository.UpdateAsync(this.model);
        IsInlineDialogShow = false;
        this.model = new Notice();
        await LoadPages();
    }

    protected async void Search(string query)
    {
        this.searchQuery = query;
        await LoadPages();
    }
}

