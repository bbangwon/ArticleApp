@inject INoticeRepository Repository
@inject IFileStorageManager FileStorageManager
@inject IWebHostEnvironment WebEnvironment

@if (isShow)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@EditorFormTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Hide">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="Model" OnValidSubmit="CreateOrEditClick">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        @if (Model.Id != 0)
                        {
                            <div class="form-group">
                                <label for="id">Id : @Model.Id</label>
                                <input type="hidden" @bind-value="Model.Id" />
                            </div>
                        }
                        <div class="form-group">
                            <label for="txtName">Name</label>
                            <InputText id="txtName" class="form-control" placeholder="Enter Name" @bind-Value="Model.Name"></InputText>
                            <ValidationMessage For="@(() => Model.Name)" class="form-text text-muted"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="txtTitle">Title</label>
                            <InputText id="txtTitle" class="form-control" placeholder="Enter Title" @bind-Value="Model.Title"></InputText>
                            <ValidationMessage For="@(() => Model.Title)" class="form-text text-muted"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="txtContent">Content</label>
                            <InputTextArea id="txtContent" class="form-control" placeholder="Enter Content" @bind-Value="Model.Content"></InputTextArea>
                            <ValidationMessage For="@(() => Model.Content)" class="form-text text-muted"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="lstCategory">Parent</label>
                            <InputSelect @bind-Value="parentId" class="form-control" id="lstCategory">
                                <option value="">--Select Parent</option>
                                @foreach (var p in parentIds)
                                {
                                    <option value="@p">@p</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => parentId)" class="form-text text-muted"></ValidationMessage>
                        </div>

                        <div class="form-group">
                            <label for="txtTitle">File</label>
                            <InputFile OnChange="HandleSelection"></InputFile>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <button type="button" class="btn btn-secondary" @onclick="Hide">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isShow = false;

    public void Show()
    {
        isShow = true;
    }

    public void Hide()
    {
        isShow = false;
    }

    [Parameter]
    public RenderFragment EditorFormTitle { get; set; }

    [Parameter]
    public Notice Model { get; set; }

    [Parameter]
    public Action CreateCallback { get; set; }

    [Parameter]
    public EventCallback<bool> EditCallback { get; set; }

    private string parentId = "0";

    protected int[] parentIds = { 1, 2, 3 };

    IBrowserFile? file;

    const long MaxAllowedSize = 512000;

    protected override void OnParametersSet()
    {
        parentId = Model.ParentId.ToString();
        if (parentId == "0")
        {
            parentId = string.Empty;
        }
    }

    protected async Task CreateOrEditClick()
    {
        if (this.file != null)
        {
            Model.FileName = this.file.Name;
            Model.FileSize = Convert.ToInt32(this.file.Size);

            string folderPath = Path.Combine(WebEnvironment.WebRootPath, "files");
            await FileStorageManager.UploadAsync(file.OpenReadStream(maxAllowedSize: MaxAllowedSize), file.Name, folderPath, true);
        }

        if (!int.TryParse(parentId, out int newParentId))
        {
            newParentId = 0;
        }
        Model.ParentId = newParentId;

        if (Model.Id == 0)
        {
            await Repository.AddAsync(Model);
            CreateCallback?.Invoke();
        }
        else
        {
            await Repository.UpdateAsync(Model);
            await EditCallback.InvokeAsync(true);
        }
    }


    protected void HandleSelection(InputFileChangeEventArgs e)
    {
        this.file = e.File;
    }
}
