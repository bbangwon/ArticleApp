@page "/Notices/Delete/{Id:int}"
@using ArticleApp.Utils;

@inject INoticeRepository Repository
@inject NavigationManager NavigationManager
@inject IFileStorageManager FileStorageManager
@inject IJSRuntime JSRuntime

<h3>Delete</h3>

<div class="row">
    <div class="col-md-12">
        <div class="form-group row">
            <label for="id" class="col-sm-2 col-form-label">Id: </label>
            <div class="col-sm-10">
                <input type="text" value="@model?.Id" id="id" class="form-control-plaintext" />
            </div>
        </div>
        <div class="form-group row">
            <label for="lblName" class="col-sm-2 col-form-label">Name: </label>
            <div class="col-sm-10">
                <input type="text" value="@model?.Name" id="lblName" class="form-control-plaintext" />
            </div>
        </div>
        <div class="form-group row">
            <label for="lblTitle" class="col-sm-2 col-form-label">Title: </label>
            <div class="col-sm-10">
                <input type="text" value="@model?.Title" id="lblTitle" class="form-control-plaintext" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-12">
                @((MarkupString)content)
            </div>
        </div>
        <div class="form-group">
            <a class="btn btn-danger" @onclick="DeleteClick">Delete</a>
            <a href="/Notices/Details/@model?.Id" class="btn btn-primary">Cancel</a>
            <a href="/Notices" class="btn btn-secondary">List</a>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    protected Notice? model = new Notice();

    protected string content = "";

    protected override async Task OnInitializedAsync()
    {
        model = await Repository.GetByIdAsync(Id);
        content = HtmlUtil.EncodeWithTabAndSpace(model?.Content);
    }

    protected async Task DeleteClick()
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"{Id}번 글을 정말로 삭제하시겠습니까?");

        if(isDelete)
        {
            await FileStorageManager.DeleteAsync(model.FileName, "");

            await Repository.RemoveAsync(Id);
            NavigationManager.NavigateTo("/Notices");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "취소되었습니다.");
        }
    }
}
