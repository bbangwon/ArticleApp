@page "/Articles"
@page "/Articles/Index"

@using ArticleApp.Data
@using ArticleApp.Pages.Articles.Components
@using BWBlazor;

@inject IArticleRepository ArticleRepository

<h3>Index</h3>

<div>
    <a href="/Articles/Create" class="btn btn-primary">Create</a>
</div>

@if (articles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="table-light">
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Created</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Id</td>
                    <td>@article.Title</td>
                    <td>@article.Created.ToShortTimeString()</td>
                    <td>
                        <a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
                        <a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
                        <a href="/Articles/Delete/@article.Id" class="btn btn-light">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ArticlePager PagerModel="pagerModel" PageIndexChanged="OnPageIndexChanged"></ArticlePager>

@code {
    private List<Article>? articles;

    private PagerModel pagerModel = new PagerModel()
    {
        Size = 2,
        ButtonCount = 5
    };

    protected override async Task OnInitializedAsync()
    {
        pagerModel.RecordCount = await ArticleRepository.GetTotalRecordsCountAsync();
        LoadPages();
    }

    async void LoadPages()
    {
        articles = await ArticleRepository.GetPageAsync(pagerModel.Index, pagerModel.Size);
        StateHasChanged();
    }

    void OnPageIndexChanged(int pageNumber)
    {
        LoadPages();
    }
}




